#!/bin/python3
from flask import Flask,render_template,flash, redirect,url_for,session,logging,request
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Message, Mail
from itsdangerous import URLSafeTimedSerializer, SignatureExpired
import datetime
from validate_email import validate_email

app = Flask(__name__)
app.config.from_pyfile('config.cfg')
db = SQLAlchemy(app)

mail = Mail(app)

s = URLSafeTimedSerializer(app.config['SECRET_KEY'])


class Contestant(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    gender = db.Column(db.String(10))
    first_name = db.Column(db.String(20))
    last_name = db.Column(db.String(80))
    email = db.Column(db.String(80), unique=True)
    year_of_birth = db.Column(db.Integer)
    telephone = db.Column(db.String(25))
    club = db.Column(db.String(50))
    contest = db.Column(db.String(25))
    confirmation = db.Column(db.String())
    time = db.Column(db.DateTime(), default=datetime.datetime.now())
    active = db.Column(db.Boolean(), default=False)
    ip = db.Column(db.String(16))
    est_swim_time = db.Column(db.String(5))

@app.route('/')
def index():
    nor = len(Contestant.query.filter_by(active=True).all())
    return render_template("index.html", nor=nor)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        token = s.dumps(email, salt='email-confirm')
        validation = validate_email(email, check_mx=True, debug=True)

        if validation == False:
            return '''<h1 style="text-align: center;">Email ist ung√ºltig</h1>
                      <script>window.setTimeout(function(){window.history.back();}, 3000);</script>'''

        if bool(Contestant.query.filter_by(email=email).first()): 
            return '''<h1 style="text-align: center;">Email bereits angemeldet</h1>
                      <script>window.setTimeout(function(){window.history.back();}, 3000);</script>'''

        new_contestant = Contestant(first_name = request.form['firstname'], last_name = request.form['lastname'], 
        email = request.form['email'], telephone = request.form['telephone'],
        year_of_birth = request.form['yob'], contest = "Eintracht", #request.form['contest'], 
    	confirmation=token,
        gender = request.form['gender'],club = request.form['club'], ip = request.environ['REMOTE_ADDR'],
        est_swim_time="{:02d}:{:02d}".format(int(request.form['minutes']), int(request.form['seconds'])))

        msg = Message('Email confirmation', sender='swimandrun-hannover@gmx.de', recipients=[email])
        link = url_for('confirm_email', token=token, _external=True)
        msg.body = 'Please confirm your registration on this link: {}'.format(link)

        mail.send(msg)
        db.session.add(new_contestant)
        db.session.commit()

        return redirect(url_for("send_email"))
    return render_template("signup.html")

@app.route('/dashboard', methods=['GET', 'POST'])
def list_all():
    query = db.session.query_property()
    contestants = Contestant.query.filter_by(active=True).order_by(Contestant.last_name).all()
    return render_template("dashboard.html", contestants=contestants)

@app.route('/confirm_email/<token>')
def confirm_email(token):
    try:
        email = s.loads(token, salt='email-confirm', max_age=79200)
    except SignatureExpired:
        return '<h1>Confirmation time has expired</h1>'
    update = Contestant.query.filter_by(confirmation=token).first()
    update.active = True
    db.session.commit()
    return redirect(url_for("confirmation"))

@app.route('/confirmation')
def confirmation():
    return render_template("confirmation.html")

@app.route('/email_sent')
def send_email():
    return render_template("email_sent.html")

@app.route('/infos')
def infos():
    return render_template("infos.html")

if __name__ == "__main__":
    db.create_all()
    app.run(debug=True,host='0.0.0.0',port=80)
